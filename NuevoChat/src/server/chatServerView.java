/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.net.SocketException;
import javax.swing.DefaultComboBoxModel;

//import com.bigchat.es.bigserver.lib.chatServerNetworkInterfaces;

/**
 * The class chatServerView implements a java swing GUI for the chat server. 
 * The class extends from Jframe in order to add all components to the JFrame
 * window.
 * @author aorozco bigfito@gmail.com
 * @version 1.0
*/
public class chatServerView extends javax.swing.JFrame {
    
    //MEMBER ATTRIBUTES SECTION

    /**
     * A {@link chatServerNetworkInterfaces} instance variable to store the info
     * of the network interfaces configured in the server machine.
     */    
    private chatServerNetworkInterfaces csnic;

    /**
     * Default constructor method for class chatServerView.
     */
    public chatServerView() {
        initComponents();
        this.csnic = new chatServerNetworkInterfaces();
        setupServerListOfNetworkInterfaces( csnic );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnStartServer = new javax.swing.JButton();
        btnStopServer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblConnectedUsers = new javax.swing.JLabel();
        listNetworkInterfaces = new javax.swing.JComboBox<>();
        txtPort = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBroadcastMessage = new javax.swing.JTextField();
        btnSendMessage = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        JScrollPane1 = new javax.swing.JScrollPane();
        txtNotificationArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BigChat - Server Window");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SERVER CONNECTION PARAMETERS", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        btnStartServer.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnStartServer.setText("START");

        btnStopServer.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnStopServer.setText("STOP");
        btnStopServer.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel2.setText("NETWORK INTERFACE:");

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel3.setText("CONNECTED USERS:");

        lblConnectedUsers.setText("0");

        listNetworkInterfaces.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtPort.setModel(new javax.swing.SpinnerNumberModel(32565, 0, 65535, 1));
        txtPort.setValue(32565);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblConnectedUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261)
                        .addComponent(btnStartServer, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(listNetworkInterfaces, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStopServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPort))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(listNetworkInterfaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnStartServer)
                        .addComponent(btnStopServer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(lblConnectedUsers)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BROADCAST MESSAGE", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel1.setText("MESSAGE:");

        txtBroadcastMessage.setEditable(false);

        btnSendMessage.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnSendMessage.setText("SEND");
        btnSendMessage.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBroadcastMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBroadcastMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSendMessage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "NOTIFICATION AREA", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        txtNotificationArea.setEditable(false);
        txtNotificationArea.setColumns(20);
        txtNotificationArea.setRows(5);
        JScrollPane1.setViewportView(txtNotificationArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane1;
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblConnectedUsers;
    private javax.swing.JComboBox<String> listNetworkInterfaces;
    private javax.swing.JTextField txtBroadcastMessage;
    private javax.swing.JTextArea txtNotificationArea;
    private javax.swing.JSpinner txtPort;
    // End of variables declaration//GEN-END:variables

    /**
     * The getButtonSendMessageReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JButton getButtonSendMessageReference(){
        return this.btnSendMessage;
    }    

    /**
     * The getButtonStartServerReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JButton getButtonStartServerReference(){
        return this.btnStartServer;
    }

    /**
     * The getButtonStopServerReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JButton getButtonStopServerReference(){
        return this.btnStopServer;
    }

    /**
     * The getTxtBroadcastMessageReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JTextField getTxtBroadcastMessageReference(){
        return this.txtBroadcastMessage;
    }

    /**
     * The getTxtNotificationAreaReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JTextArea getTxtNotificationAreaReference(){
        return this.txtNotificationArea;
    }

    /**
     * The getTxtPortReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JSpinner getTxtPortReference(){
        return this.txtPort;
    }

    /**
     * The getLblConnectedUsersReference method returns the value of the body of the chat envelope.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JLabel getLblConnectedUsersReference(){
        return this.lblConnectedUsers;
    }

    /**
     * The getListNetworkInterfacesReference method returns a reference to the
     * JComboBox component having the information of the network interfaces from
     * the server.
     * @return A reference to the JComboBox object from the swing GUI.
     */    
    public javax.swing.JComboBox<String> getListNetworkInterfacesReference(){
        return this.listNetworkInterfaces;
    }

    /**
     * The getChatServerNetworkInterfacesReference method returns a reference to 
     * an object containing the information of all available IPv4 network interfaces
     * on the server.
     * @return A reference to a {@link chatServerNetworkInterfaces} object.
     */    
    public chatServerNetworkInterfaces getChatServerNetworkInterfacesReference(){
        return this.csnic;
    }

    /**
     * The setupServerListOfNetworkInterfaces method retrieves the information of
     * the IPv4 network interfaces on the chat server to populate the JComboBox
     * object.
     * @param nicp A reference to a {@link chatServerNetworkInterfaces} object.
     */    
    public void setupServerListOfNetworkInterfaces(chatServerNetworkInterfaces nicp){
        
        chatServerNetworkInterfaces nic;
        nic = nicp;
        
        try{
            nic.retrieveNetworkInterfacesInfo();
            this.listNetworkInterfaces.setModel( new DefaultComboBoxModel( nic.getNetworkInterfacesAndAddressesArray().toArray() ) );
        }catch(SocketException se){
            this.txtNotificationArea.append("[ERROR]: Ocurrio un problema al recuperar la lista de interfaces de red.\n");
            this.txtNotificationArea.append( se.toString() + "\n" );
        }        
    }    

}
